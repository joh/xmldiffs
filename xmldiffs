#!/usr/bin/env python
"""Compare two XML files, ignoring element and attribute order

Copyright (c) 2017-2022, xmldiffs developers.
License: BSD, see LICENSE for more details.

"""
from __future__ import print_function, unicode_literals
import argparse
import difflib
import sys
import os
import io
import xml.etree.ElementTree as ET
from tempfile import NamedTemporaryFile
import subprocess
from textwrap import dedent

def attr_str(k, v):
    return "{}=\"{}\"".format(k,v)

def node_str(n):
    attrs = sorted(n.attrib.items())
    astr = " ".join(attr_str(k,v) for k,v in attrs)
    s = n.tag
    if astr:
        s += " " + astr
    return s

def node_key(n):
    return node_str(n)

def sort_xml(node, level=0):
    """Return a list of text lines from an I{ElementTree} node

    @param node: an C{Element} object containing XML data.
    @param level: text indentation level.

    """
    indent = "  " * level
    children = list(node)
    text = (node.text or "").strip()
    tail = (node.tail or "").strip()
    out = []

    if children or text:
        children.sort(key=node_key)

        node_start = "%s<%s>" % (indent, node_str(node))

        if text and len(children) == 0:
            line_length = len(node_start) + len(text) + 1 + len(node.tag) + 1
            if line_length < 120:
                out.append("%s%s</%s>\n" % (node_start, text, node.tag))
            else:
                out.append(node_start + "\n")
                out.append("%s%s\n" % (indent, text))
                out.append("%s</%s>\n" % (indent, node.tag))

        else:
            out.append(node_start + "\n")
            if text:
                out.append("%s%s\n" % (indent, text))
            for child in sorted(children, key=node_key):
                out.extend(sort_xml(child, level+1))
            out.append("%s</%s>\n" % (indent, node.tag))
    else:
        out.append("%s<%s/>\n" % (indent, node_str(node)))

    if tail:
        out.append("%s%s\n" % (indent, tail))

    return out

def write_list(stream, lines, encoding="utf-8"):
    """Write a sequence of Unicode lines to a binary output stream

    @param stream: An open file-like object.
    @param lines: A sequence of binary strings to write. Must include newlines.
    @param encoding: Optional character encoding. (Default: UTF-8.)

    """
    stream.write("".join(lines).encode("utf-8"))

def xmldiffs(file1, file2, diffargs=["-u"]):
    """Execute the C{diff} command on two files, return I{stdout} contents"""
    tree = ET.parse(file1)
    tmp1 = NamedTemporaryFile()
    write_list(tmp1, sort_xml(tree.getroot()))
    tmp1.flush()

    tree = ET.parse(file2)
    tmp2 = NamedTemporaryFile()
    write_list(tmp2, sort_xml(tree.getroot()))
    tmp2.flush()

    args = [ "diff" ]
    args += diffargs
    args += [ "--label", file1, "--label", file2 ]
    args += [ tmp1.name, tmp2.name ]

    proc = subprocess.Popen(args, stdout=subprocess.PIPE)
    return proc.communicate()[0]

def context_diff(file1, file2, ctxlines):
    """Return a context diff text"""
    x1 = ET.parse(file1)
    x2 = ET.parse(file2)
    lines = difflib.context_diff(
        sort_xml(x1.getroot()), sort_xml(x2.getroot()),
        file1, file2, n=(ctxlines or 3))
    return "".join(lines)

def ndiff(file1, file2):
    """Return a Differ-style delta text"""
    x1 = ET.parse(file1)
    x2 = ET.parse(file2)
    lines = difflib.ndiff(sort_xml(x1.getroot()), sort_xml(x2.getroot()))
    return "".join(lines)

def unidiff(file1, file2, ctxlines):
    """Return a unified diff text"""
    x1 = ET.parse(file1)
    x2 = ET.parse(file2)
    lines = difflib.unified_diff(
        sort_xml(x1.getroot()), sort_xml(x2.getroot()),
        file1, file2, n=(ctxlines or 3))
    return "".join(lines)

def html_diff(file1, file2, ctxlines):
    """Return a unified diff text"""
    x1 = ET.parse(file1)
    x2 = ET.parse(file2)
    diff = difflib.HtmlDiff()
    args = dict(
        fromlines=sort_xml(x1.getroot()),
        tolines=sort_xml(x2.getroot()),
        fromdesc=file1,
        todesc=file2)
    if ctxlines:
        args["context"] = True
        args["numlines"] = ctxlines
    return diff.make_file(**args)

def parse_commandline(args):
    """Return command options filled from command line

    @rtype: C{argparse.Namespace}
    @return: An object with the following attributes:

        file - a tuple containing two file names.
        mode - diff type: "external", "context", "ndiff", "unified", "html".
        diffargs - additional options from the command line.

    """
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter, add_help=False,
        description=dedent("""\
            Compare two XML files, ignoring element and attribute order."""),
        epilog=dedent("""\
            Any extra options are passed to the `diff' command if it is used to compare the texts.
            When the output is in one of the primary formats, extra options are ignored.

            Copyright (c) 2017-2022, xmldiffs developers.
            License: BSD, see LICENSE for more details.
            """))
    parser.add_argument("-h", "--help", action='help',
        default=argparse.SUPPRESS, help="Show this help message and exit.")
    grp = parser.add_mutually_exclusive_group()
    grp.add_argument("-d", "--diff", dest="mode",
        action="store_const", const="external",
        help="Run the `diff' program to compare normalized texts.")
    grp.add_argument("-c", "--context", dest="mode",
        action="store_const", const="context",
        help="Output context diff text.")
    grp.add_argument("-u", "--unified", dest="mode",
        action="store_const", const="unified",
        help="Output unified diff text. This is the default mode.")
    grp.add_argument("-n", "--ndiff", dest="mode",
        action="store_const", const="ndiff",
        help="Output Differ-style delta.")
    grp.add_argument("-t", "--html", dest="mode",
        action="store_const", const="html",
        help="Output HTML page showing line by line differences.")
    grp.add_argument("-x", "--xml", dest="mode",
        action="store_const", const="xml", help=dedent("""\
        Write the normalized XML text to a file.
        In this case the `--output' option is ignored,
        and the output file is always the second name
        from the command line.
        """))
    parser.add_argument("-l", "--lines", metavar="NUM", type=int,
        help=dedent("""\
        Number of the context lines for unified, context, and html diffs.
        For unified and context diffs, the value defaults to 3.
        For html diff, the value defaults to None, which produces
        full output lines.  Pass an integer to produce context lines.
        """))
    parser.add_argument("-o", "--output", metavar="OUT", default="-",
        help="Name of the output file (default: stdout).")
    parser.add_argument("file", nargs=2, metavar="FILE",
        help="An xml file to compare.")
    (options, diffargs) = parser.parse_known_args(args)
    options.diffargs = diffargs
    return options

def run(args):
    options = parse_commandline(args[1:])
    mode = options.mode
    if mode == "xml":
        tree = ET.parse(options.file[0])
        txt = "".join(sort_xml(tree.getroot())).encode("utf-8")
        options.output = options.file[1]
    elif mode == "external":
        txt = xmldiffs(*options.file, diffargs=options.diffargs or ["-u"])
    elif mode == "html":
        txt = html_diff(*options.file, ctxlines=options.lines)
    elif mode == "context":
        txt = context_diff(*options.file, ctxlines=options.lines)
    elif mode == "ndiff":
        txt = ndiff(*options.file)
    else:
        txt = unidiff(*options.file, ctxlines=options.lines)
    if sys.version_info[0] < 3:
        out = sys.stdout
        unicode_type = unicode
    else:
        out = sys.stdout.buffer
        unicode_type = str
    # All methods except "external" produce a Unicode string
    if isinstance(txt, unicode_type):
        txt = txt.encode("utf-8")
    if options.output == "-":
        out.write(txt)
    else:
        with open(options.output, "wb") as out:
            out.write(txt)
        print("Written %s" % options.output)

if __name__ == '__main__':
    run(sys.argv)
